{"cells":[{"cell_type":"markdown","metadata":{"id":"aOdETJG1a4Ok"},"source":["# State class\n","틱택토 상태를 나타낼 수 있는 class를 만들어 주세요.\n","\n","- 2명의 플레이어가 있고, 각 플레이어의 수가 뭔지 식별가능해야 합니다.  \n","\n","**꼭 구현해야할 매소드(주니어/시니어 공통)**\n","- 둘 수 있는 위치가 어딘지 알려주는 함수\n","- win / lose / draw(무승부)를 식별해주는 함수\n","- render 함수\n","\n","**min-max algorithm / alpha-beta algorithm 구현(시니어)**\n","\n","### 🚨 만약 감이 안 온다면 운영진에게 연락주시면 참고할 만한 레퍼런스를 보내드리겠습니다.\n","### 🚨 참고한 레퍼런스가 있다면, 출처를 남겨주세요."]},{"cell_type":"markdown","metadata":{"id":"u2JdDbJEuB9k"},"source":["\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Gp_Dw9PtOqge"},"source":["# 틱택톡의 state\n","- 0: 빈 칸\n","- 1: 플레이어 1의 기호 (X)\n","- -1: 플레이어 2의 기호 (O)"]},{"cell_type":"markdown","metadata":{"id":"Ur3mwoBEPHmw"},"source":["# 틱택톡의 Action Space\n","- 3x3 보드의 각 칸 : 0-8"]},{"cell_type":"markdown","metadata":{"id":"bENuR2-fsu98"},"source":["## get_possible_moves 함수\n","- 빈 칸의 좌표들이 담긴 moves 리스트를 반환"]},{"cell_type":"markdown","metadata":{"id":"6gnXgxKFsq8N"},"source":["## check_winner함수\n","- 가로, 세로, 대각선을 확인\n","- 승자 or 무승부 반환"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":1087,"status":"ok","timestamp":1727068196822,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"IGyVFjznPG2F"},"outputs":[],"source":["class TictactoeState:\n","    def __init__(self):\n","        # 3x3 보드 초기화 (0: 빈 칸, 1: 플레이어 1, 2: 플레이어 2)\n","        self.board = [[0 for _ in range(3)] for _ in range(3)]\n","        # 현재 플레이어 (1: 플레이어 1, 2: 플레이어 2)\n","        self.current_player = 1\n","\n","    def get_possible_moves(self):\n","        # 둘 수 있는 위치(빈 칸의 좌표 리스트)를 반환\n","        moves = []\n","        for i in range(3):\n","            for j in range(3):\n","                if self.board[i][j] == 0:  # 빈 칸일 경우\n","                    moves.append((i, j)) # 리스트에 좌표 추가\n","        return moves\n","\n","    def check_winner(self):\n","        # 현재 보드 상태에서 승자, 무승부 여부를 확인\n","        # 승자 확인: 가로, 세로, 대각선 줄 검사\n","        lines = [    # 가로, 세로, 대각선에 해당하는 모든 줄을 수집하여 lines 리스트에 저장\n","            # 가로, 세로 확인\n","            [self.board[i] for i in range(3)],  # 각 행\n","            [list(row[i] for row in self.board) for i in range(3)],  # 각 열\n","            # 대각선 확인\n","            [[self.board[i][i] for i in range(3)], [self.board[i][2 - i] for i in range(3)]]\n","        ]\n","\n","        for group in lines:\n","            for line in group:\n","                if len(set(line)) == 1 and line[0] != 0:  # 세 칸이 동일하고 빈 칸이 아닐 때, 집합(set)으로 변환하여 중복을 제거\n","                    return line[0]  # 승자를 반환 (1: 플레이어 1, 2: 플레이어 2)\n","\n","        # 무승부 확인: 빈 칸이 없고 승자가 없을 때\n","        if not self.get_possible_moves():\n","            return \"Draw\"\n","\n","        return None  # 아직 승부가 나지 않음\n","\n","    def make_move(self, row, col):\n","        # 주어진 위치에 현재 플레이어의 수를 놓는다\n","        if self.board[row][col] == 0:  # 빈 칸인지 확인\n","            self.board[row][col] = self.current_player # 수 놓기(1 or 2)\n","            # 다음 턴을 위한 플레이어 변경\n","            self.current_player = 1 if self.current_player == 2 else 2\n","        else:\n","            raise ValueError(\"빈 칸이 없다!\")\n","\n","    def render(self):\n","        # 현재 보드 상태를 출력\n","        symbols = {0: ' ', 1: 'X', 2: 'O'}\n","        for i in range(3):\n","            print(' | '.join(symbols[self.board[i][j]] for j in range(3)))\n","            if i \u003c 2:\n","                print('---------')\n","        print()"]},{"cell_type":"markdown","metadata":{"id":"23V0fuZTsC5m"},"source":["# 플레이어 1이 이겼을 때"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1727068197816,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"4RwyM0_vPvJD","outputId":"3c74025f-7504-43b4-93f5-74a1f495cf56"},"outputs":[{"name":"stdout","output_type":"stream","text":["  |   |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n"]}],"source":["state = TictactoeState()\n","state.render()"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1727068197816,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"sSfbuMjnBucj","outputId":"879a5b06-1d78-4650-813e-2a1ca29c3d95"},"outputs":[{"name":"stdout","output_type":"stream","text":["Possible moves: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n"]}],"source":["# 초기 가능한 이동 확인\n","print(\"Possible moves:\", state.get_possible_moves())"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29,"status":"ok","timestamp":1727068197816,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"9CJgP7olP0_H","outputId":"c839b722-3026-4f9f-cec3-310ee72f314d"},"outputs":[{"name":"stdout","output_type":"stream","text":["X |   |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n"]}],"source":["# 플레이어 1이 (0, 0)에 놓는다\n","state.make_move(0, 0)\n","state.render()"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1727068197816,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"-sXacyOwP09j","outputId":"69f0d2db-bb3d-4dfd-bed7-8d0e740b0b45"},"outputs":[{"name":"stdout","output_type":"stream","text":["X |   |  \n","---------\n","  | O |  \n","---------\n","  |   |  \n","\n"]}],"source":["# 플레이어 2가 (1, 1)에 놓는다\n","state.make_move(1, 1)\n","state.render()"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"_CsKV_I1rfzL","outputId":"694778b8-95b7-4239-e853-f893f0158fae"},"outputs":[{"name":"stdout","output_type":"stream","text":["X |   | X\n","---------\n","  | O |  \n","---------\n","  |   |  \n","\n"]}],"source":["# 플레이어 1이 (0, 2)에 놓는다\n","state.make_move(0, 2)\n","state.render()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"hVQEOPmbrmTl","outputId":"b4b0965a-1e66-425d-bce0-79306477aee8"},"outputs":[{"name":"stdout","output_type":"stream","text":["X |   | X\n","---------\n","  | O |  \n","---------\n","O |   |  \n","\n"]}],"source":["# 플레이어 2가 (2, 0)에 놓는다\n","state.make_move(2, 0)\n","state.render()"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"jpVEsd--rr2w","outputId":"634d2ae8-acf7-4bcc-8696-9f4181485f04"},"outputs":[{"name":"stdout","output_type":"stream","text":["X | X | X\n","---------\n","  | O |  \n","---------\n","O |   |  \n","\n"]}],"source":["# 플레이어 1이 (0, 1)에 놓는다\n","state.make_move(0, 1)\n","state.render()"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"QJqcyVeyP2tf","outputId":"d1a0951f-ec01-4a5b-a535-01d6fd531f4f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Possible moves: [(1, 0), (1, 2), (2, 1), (2, 2)]\n"]}],"source":["# 가능한 이동 확인\n","print(\"Possible moves:\", state.get_possible_moves())"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"O9TAFagzr5UB","outputId":"bb7b7e20-6cce-4750-ff6d-4b266c779f86"},"outputs":[{"name":"stdout","output_type":"stream","text":["Winner: 1\n"]}],"source":["# 승자 확인\n","print(\"Winner:\", state.check_winner())"]},{"cell_type":"markdown","metadata":{"id":"v7VvpCp-sGu8"},"source":["# 그냥.."]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"v6TatCB9r9V4","outputId":"6241be32-a8b8-48c4-bf2d-c2ae0f1228a5"},"outputs":[{"name":"stdout","output_type":"stream","text":["  |   |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n"]}],"source":["state = TictactoeState()\n","state.render()"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"UKzUZ__Vr_Ju","outputId":"5bb02e4c-0245-4c85-a29e-aabfbbc3a426"},"outputs":[{"name":"stdout","output_type":"stream","text":["  | X |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n"]}],"source":["# 플레이어 1이 (0, 1)에 놓는다\n","state.make_move(0, 1)\n","state.render()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"l0TbZzmTsATI","outputId":"158817fc-5556-4c10-b418-05ca116a72e9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Winner: None\n"]}],"source":["# 승자 확인\n","print(\"Winner:\", state.check_winner())"]},{"cell_type":"markdown","metadata":{"id":"jTAN5uyxsRlM"},"source":["# minimax 및 alpha_beta_pruning 메서드 추가"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"USwAxC31sWy2"},"outputs":[],"source":["class TictactoeState:\n","    def __init__(self):\n","        self.board = [[0 for _ in range(3)] for _ in range(3)]\n","        self.current_player = 1\n","\n","    def get_possible_moves(self):\n","        moves = []\n","        for i in range(3):\n","            for j in range(3):\n","                if self.board[i][j] == 0:\n","                    moves.append((i, j))\n","        return moves\n","\n","    def check_winner(self):\n","        lines = [\n","            [self.board[i] for i in range(3)],\n","            [list(row[i] for row in self.board) for i in range(3)],\n","            [[self.board[i][i] for i in range(3)], [self.board[i][2 - i] for i in range(3)]]\n","        ]\n","\n","        for group in lines:\n","            for line in group:\n","                if len(set(line)) == 1 and line[0] != 0:\n","                    return line[0]\n","\n","        if not self.get_possible_moves():\n","            return \"Draw\"\n","\n","        return None\n","\n","    def make_move(self, row, col):\n","        if self.board[row][col] == 0:\n","            self.board[row][col] = self.current_player\n","            self.current_player = 1 if self.current_player == 2 else 2\n","        else:\n","            raise ValueError(\"빈 칸이 없다\")\n","\n","    def undo_move(self, row, col):\n","        # 이전에 둔 수를 취소하고 플레이어 순서를 바꾼다\n","        self.board[row][col] = 0\n","        self.current_player = 1 if self.current_player == 2 else 2\n","\n","    def render(self):\n","        symbols = {0: ' ', 1: 'X', 2: 'O'}\n","        for i in range(3):\n","            print(' | '.join(symbols[self.board[i][j]] for j in range(3)))\n","            if i \u003c 2:\n","                print('---------')\n","        print()\n","\n","    # Min-Max 알고리즘\n","    def minimax(self, maximizing):\n","        winner = self.check_winner()\n","        if winner == 1:\n","            return 1  # 플레이어 1 승리\n","        elif winner == 2:\n","            return -1  # 플레이어 2 승리\n","        elif winner == \"Draw\":\n","            return 0  # 무승부\n","\n","        if maximizing:\n","            max_eval = -float('inf')\n","            for move in self.get_possible_moves():\n","                self.make_move(move[0], move[1])\n","                eval = self.minimax(False)\n","                self.undo_move(move[0], move[1])\n","                max_eval = max(max_eval, eval)\n","            return max_eval\n","        else:\n","            min_eval = float('inf')\n","            for move in self.get_possible_moves():\n","                self.make_move(move[0], move[1])\n","                eval = self.minimax(True)\n","                self.undo_move(move[0], move[1])\n","                min_eval = min(min_eval, eval)\n","            return min_eval\n","\n","    # 알파-베타 가지치기\n","    def alpha_beta_pruning(self, maximizing, alpha, beta):\n","        winner = self.check_winner()\n","        if winner == 1:\n","            return 1  # 플레이어 1 승리\n","        elif winner == 2:\n","            return -1  # 플레이어 2 승리\n","        elif winner == \"Draw\":\n","            return 0  # 무승부\n","\n","        if maximizing: # 최대한 점수 최대화\n","            max_eval = -float('inf')\n","            for move in self.get_possible_moves():\n","                self.make_move(move[0], move[1])\n","                eval = self.alpha_beta_pruning(False, alpha, beta)\n","                self.undo_move(move[0], move[1])\n","                max_eval = max(max_eval, eval)\n","                alpha = max(alpha, eval) # 베타 값 갱신\n","                if beta \u003c= alpha:\n","                    break  # 베타 가지치기\n","            return max_eval\n","        else:\n","            min_eval = float('inf') # 최대한 점수 최소화\n","            for move in self.get_possible_moves():\n","                self.make_move(move[0], move[1])\n","                eval = self.alpha_beta_pruning(True, alpha, beta)\n","                self.undo_move(move[0], move[1])\n","                min_eval = min(min_eval, eval)\n","                beta = min(beta, eval) # 베타 값 갱신\n","                if beta \u003c= alpha:\n","                    break  # 알파 가지치기\n","            return min_eval\n","\n","    def best_move(self):\n","        # 미니맥스 혹은 알파-베타 가지치기로 최적의 수를 찾는다\n","        best_val = -float('inf')\n","        best_move = None\n","        for move in self.get_possible_moves():\n","            self.make_move(move[0], move[1])\n","            move_val = self.alpha_beta_pruning(False, -float('inf'), float('inf')) # 알파-베타 가지치기\n","            self.undo_move(move[0], move[1])\n","            if move_val \u003e best_val:\n","                best_val = move_val\n","                best_move = move\n","        return best_move"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1727068197817,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"hnnNalBmshLj","outputId":"1aee8887-10fd-4cda-810f-d53012f86099"},"outputs":[{"name":"stdout","output_type":"stream","text":["  |   |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n"]}],"source":["state = TictactoeState()\n","state.render()"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1816,"status":"ok","timestamp":1727068199627,"user":{"displayName":"­이은나(자연과학대학 통계학과)","userId":"09111439727100418504"},"user_tz":-540},"id":"BdtnePAKCr9i","outputId":"18a9339b-58aa-46db-ac03-6b9fb6f42f40"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best move: (0, 0)\n","X |   |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n"]}],"source":["# 최적의 수를 찾는다\n","move = state.best_move()\n","print(\"Best move:\", move)\n","\n","# 최적의 수를 둔다\n","if move:\n","    state.make_move(move[0], move[1])\n","\n","state.render()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"yTdDQzLbDPJW"},"outputs":[{"name":"stdout","output_type":"stream","text":["틱택토 게임을 시작합니다!\n","  |   |  \n","---------\n","  |   |  \n","---------\n","  |   |  \n","\n","플레이어 1 (X)의 차례입니다.\n"]}],"source":["def play_game():\n","    game = TictactoeState()\n","\n","    print(\"틱택토 게임을 시작합니다!\")\n","    game.render()\n","\n","    while True:\n","        # 플레이어의 차례\n","        if game.current_player == 1:\n","            print(\"플레이어 1 (X)의 차례입니다.\")\n","            try:\n","                row = int(input(\"행 번호 (0, 1, 2): \"))\n","                col = int(input(\"열 번호 (0, 1, 2): \"))\n","                game.make_move(row, col)\n","            except ValueError as e:\n","                print(e)\n","                continue\n","            except (IndexError, ValueError):\n","                print(\"올바른 숫자를 입력하세요 (0, 1, 2).\")\n","                continue\n","        # AI의 차례\n","        else:\n","            print(\"플레이어 2 (O, AI)의 차례입니다.\")\n","            move = game.best_move()\n","            if move:\n","                game.make_move(move[0], move[1])\n","\n","        game.render()\n","\n","        # 게임 종료 여부 확인\n","        winner = game.check_winner()\n","        if winner is not None:\n","            if winner == 1:\n","                print(\"플레이어 1 (X)이 승리했습니다!\")\n","            elif winner == 2:\n","                print(\"플레이어 2 (O, AI)가 승리했습니다!\")\n","            else:\n","                print(\"무승부입니다!\")\n","            break\n","\n","# 게임 시작\n","play_game()\n"]}],"metadata":{"colab":{"name":"","provenance":[{"file_id":"13kZayQr9nmcdlmwWpbrVmqnJl4pgehPK","timestamp":1726452075429}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}